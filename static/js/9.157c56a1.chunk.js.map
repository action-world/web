{"version":3,"sources":["components/SearchInput/SearchInput.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","hooks/useBUSDPrice.ts","views/Farms/components/types.ts","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["StyledInput","styled","Input","InputWrapper","div","theme","mediaQueries","sm","StyledImage","Image","SearchInput","onChangeCallback","onChange","placeholder","useState","searchText","setSearchText","t","useTranslation","debouncedOnChange","useMemo","debounce","e","src","alt","width","height","value","target","Wrapper","colors","primary","ExpandableSectionButton","onClick","expanded","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","xs","StyledErrorMessage","Text","ModalInput","max","onSelectMax","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","borderRadius","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","ml","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","BUSD_MAINNET","USDT","ChainId","MAINNET","useBUSDPrice","currency","useActiveWeb3React","wrapped","wrappedCurrency","tokenPairs","currencyEquals","WETH","equals","usePairs","ethPairState","ethPair","busdPairState","busdPair","busdEthPairState","busdEthPair","price","priceOf","Price","denominator","numerator","ethPairETHAmount","reserveOf","ethPairETHBUSDValue","quote","raw","JSBI","BigInt","PairState","EXISTS","greaterThan","ethBusdPrice","currencyEthPrice","busdPrice","multiply","invert","ViewMode","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","useMatchBreakpoints","isDesktop","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","className","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","xxl","ActionTitles","ActionContent","earningToken","earningsBigNumber","earningTokenBUSDPrice","Token","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ATag","Button","ActionPanel","details","bsc","as","marginRight","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","rewardOneDay","rewardPerBlock","DEFAULT_TOKEN_DECIMAL","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","Link","to","show","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","PageHeader","RadioCom","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","TABLE","localStorageKey","viewMode","currentBlock","useBlock","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","parseInt","rewardEndBlockNumber","inactiveFarms","archivedFarms","isArchivedPid","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","totalLiquidity","getFarmApr","poolWeight","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","Page","Select","options","option","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/9.157c56a1.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Input, Image } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n  background-color: #fff;\n  border: none;\n  padding-left: 28px;\n  width: 165px;\n  &::-webkit-input-placeholder {\n    color: #a6a6b7;\n  }\n  &:focus:not(:disabled) {\n    box-shadow: none;\n  }\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\nconst StyledImage = styled(Image)`\n  position: absolute;\n  top: 12px;\n  left: 8px;\n`\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <InputWrapper>\n      <StyledImage src=\"/images/search.png\" alt=\"\" width={16} height={16} />\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\n    </InputWrapper>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'HO' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'HO' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading } from '@pancakeswap/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\nimport Spacer from './Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BigNumber } from 'bignumber.js'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n  decimals?: number\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  // box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n  border: none;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n  decimals = 18,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceBigNumber = new BigNumber(balance)\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\n      return balanceBigNumber.toLocaleString()\n    }\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"#8E1673\">\n          {t('No tokens to stake')}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"primary\">\n            {t('Get %symbol%', { symbol })}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss} style={{ borderRadius: '10px' }}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"#5C5C75\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss} style={{ borderRadius: '10px' }}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\n      console.info(txHash)\n    },\n    [masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber && stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber && stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance && rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              // t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              t('Your earnings have been sent to your wallet!'),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n      >\n        {t('Withdrawal reward')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await callWithGasPrice(lpContract, 'approve', [\n        masterChefContract.address,\n        ethers.constants.MaxUint256,\n      ])\n      const receipt = await tx.wait()\n      return receipt.status\n    } catch (e) {\n      return false\n    }\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n  } = farm.userData || {}\n  const allowance = new BigNumber(allowanceAsString)\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n  const earnings = new BigNumber(earningsAsString)\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          {farm.lpSymbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { Farm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity && farm.liquidity.gt(0)\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        {!removed && (\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\n            <Text>{t('APR')}:</Text>\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n              {farm.apr ? (\n                <ApyButton\n                  variant=\"text-and-button\"\n                  pid={farm.pid}\n                  lpSymbol={farm.lpSymbol}\n                  multiplier={farm.multiplier}\n                  lpLabel={lpLabel}\n                  addLiquidityUrl={addLiquidityUrl}\n                  cakePrice={cakePrice}\n                  apr={farm.apr}\n                  displayApr={displayApr}\n                />\n              ) : (\n                <Skeleton height={24} width={80} />\n              )}\n            </Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Earn')}:</Text>\n          <Text bold>{earnLabel}</Text>\n        </Flex>\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import { ChainId, Currency, currencyEquals, JSBI, Price, WETH } from '@awswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { USDT, AW } from '../config/constants/tokens'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nconst BUSD_MAINNET = USDT[ChainId.MAINNET]\n\n/**\n * Returns the price in BUSD of the input currency\n * @param currency currency to compute the BUSD price of\n */\nexport default function useBUSDPrice(currency?: Currency): Price | undefined {\n  const { chainId } = useActiveWeb3React()\n  const wrapped = wrappedCurrency(currency, chainId)\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\n    () => [\n      [\n        chainId && wrapped && currencyEquals(WETH[chainId], wrapped) ? undefined : currency,\n        chainId ? WETH[chainId] : undefined,\n      ],\n      [wrapped?.equals(BUSD_MAINNET) ? undefined : wrapped, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\n      [chainId ? WETH[chainId] : undefined, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\n    ],\n    [chainId, currency, wrapped],\n  )\n\n  const [[ethPairState, ethPair], [busdPairState, busdPair], [busdEthPairState, busdEthPair]] = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined\n    }\n    // handle weth/eth\n    if (wrapped.equals(WETH[chainId])) {\n      if (busdPair) {\n        const price = busdPair.priceOf(WETH[chainId])\n        return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\n      }\n      return undefined\n    }\n    // handle busd\n    if (wrapped.equals(BUSD_MAINNET)) {\n      return new Price(BUSD_MAINNET, BUSD_MAINNET, '1', '1')\n    }\n\n    const ethPairETHAmount = ethPair?.reserveOf(WETH[chainId])\n    const ethPairETHBUSDValue: JSBI =\n      ethPairETHAmount && busdEthPair ? busdEthPair.priceOf(WETH[chainId]).quote(ethPairETHAmount).raw : JSBI.BigInt(0)\n\n    // all other tokens\n    // first try the busd pair\n    if (\n      busdPairState === PairState.EXISTS &&\n      busdPair &&\n      busdPair.reserveOf(BUSD_MAINNET).greaterThan(ethPairETHBUSDValue)\n    ) {\n      const price = busdPair.priceOf(wrapped)\n      return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\n    }\n\n    if (ethPairState === PairState.EXISTS && ethPair && busdEthPairState === PairState.EXISTS && busdEthPair) {\n      if (busdEthPair.reserveOf(BUSD_MAINNET).greaterThan('0') && ethPair.reserveOf(WETH[chainId]).greaterThan('0')) {\n        const ethBusdPrice = busdEthPair.priceOf(BUSD_MAINNET)\n        const currencyEthPrice = ethPair.priceOf(WETH[chainId])\n        const busdPrice = ethBusdPrice.multiply(currencyEthPrice).invert()\n        return new Price(currency, BUSD_MAINNET, busdPrice.denominator, busdPrice.numerator)\n      }\n    }\n\n    return undefined\n  }, [chainId, currency, ethPair, ethPairState, busdEthPair, busdEthPairState, busdPair, busdPairState, wrapped])\n}\n\nexport const useCakeBusdPrice = (): Price | undefined => {\n  const { chainId } = useActiveWeb3React()\n  const currentChaindId = chainId || ChainId.MAINNET\n  const cakeBusdPrice = useBUSDPrice(AW[currentChaindId])\n  return cakeBusdPrice\n}\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: #5c5c75;\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <Container>\n      {value ? (\n        <Container>\n          <AprWrapper>{value}%</AprWrapper>\n        </Container>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  )\n  // return originalValue !== 0 ? (\n  //   <Container>\n  //     {originalValue ? (\n  //       <ApyButton\n  //         variant={hideButton ? 'text' : 'text-and-button'}\n  //         pid={pid}\n  //         lpSymbol={lpSymbol}\n  //         lpLabel={lpLabel}\n  //         multiplier={multiplier}\n  //         cakePrice={cakePrice}\n  //         apr={originalValue}\n  //         displayApr={value}\n  //         addLiquidityUrl={addLiquidityUrl}\n  //       />\n  //     ) : (\n  //       <AprWrapper>\n  //         <Skeleton width={60} />\n  //       </AprWrapper>\n  //     )}\n  //   </Container>\n  // ) : (\n  //   <Container>\n  //     <AprWrapper>{originalValue}%</AprWrapper>\n  //   </Container>\n  // )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { Token } from 'config/constants/types'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n  color: #5c5c75;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {/* {!isDesktop && t('Details')} */}\n      <ArrowIcon color=\"#A6A6B7\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: #5c5c75;\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of HOS rewards receives, as a proportion of the HOS produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 HOS per block, a 40x farm would receive 40 HOS per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container className=\"aaa\">\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"#5C5C75\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Total value of the funds in this liquidity pool'), {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text color=\"#5C5C75\">{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"#5C5C75\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 115px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 115px;\n    align-self: flex-end;\n  }\n  ${({ theme }) => theme.mediaQueries.xxl} {\n    margin-left: 96px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n  .cake {\n    font-family: PingFang SC;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    color: #261977;\n  }\n  .earned {\n    font-family: PingFang SC;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    color: #5c5c75;\n    margin-right: 5px;\n  }\n  .enable-farm {\n    font-family: PingFang SC;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 12px;\n    color: #261977;\n  }\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  .val {\n    color: #5c5c75;\n    font-family: DINPro;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n    width: 249px;\n    height: 38px;\n    line-height: 38px;\n    border: 1px solid #ededf1;\n    padding-left: 10px;\n    border-radius: 8px;\n    margin-top: 10px;\n  }\n  .btn-get {\n    margin-top: 8px;\n    width: 249px;\n    background: #32324a;\n    border-radius: 8px;\n    height: 38px;\n  }\n  .btn-start {\n    margin-top: 12px;\n    width: 249px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    background: #f56020;\n    border-radius: 8px;\n    font-family: PingFang SC;\n    font-style: normal;\n    font-weight: normal;\n    color: #fff;\n    border-color: transparent;\n  }\n  .btn-connect {\n    margin-top: 18px;\n    width: 249px;\n    height: 38px;\n    line-height: 38px;\n    text-align: center;\n    background: #f56020;\n    color: #fff;\n  }\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport useToast from 'hooks/useToast'\nimport { ChainId, Token } from '@awswap/sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady, earningToken }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const earningTokenBUSDPrice = useBUSDPrice(\n    new Token(ChainId.MAINNET, earningToken.address[ChainId.MAINNET], earningToken.decimals, earningToken.symbol),\n  )\n\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(earningTokenBUSDPrice && earningTokenBUSDPrice.toFixed(6)).toNumber()\n    displayBalance = earnings && earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\" className=\"cake\">\n          {earningToken?.symbol}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" className=\"earned\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading className=\"val\">{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          className=\"btn-get\"\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!'),\n                // t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Withdrawal reward')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber && stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber && stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" className=\"earned\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {/* {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )} */}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"#5C5C75\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"#261977\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"primary\"\n            className=\"btn-start\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"#5C5C75\" fontSize=\"12px\" pr=\"4px\" className=\"earned\">\n          {t('Pledge')}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"#261977\" fontSize=\"12px\" className=\"enable-farm\">\n          {/* {t('Enable Farm')} */}\n          {lpLabel}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          disabled={requestedApproval}\n          onClick={handleApprove}\n          variant=\"secondary\"\n          className=\"btn-start\"\n        >\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  // LinkExternal,\n  Text,\n  Button,\n} from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport {\n  // CoreTag,\n  CommunityTag,\n  DualTag,\n} from 'components/Tags'\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  background: #f5f8fd;\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px 16px;\n  }\n`\n\n// const StyledLinkExternal = styled(LinkExternal)`\n//   font-weight: 400;\n// `\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ATag = styled(Button)`\n  display: flex;\n  align-items: center;\n  width: fit-content;\n  color: #261977;\n  padding: 0 11px;\n  height: 24px;\n  line-height: 24px;\n  border-radius: 50px;\n  font-size: 12px;\n  text-align: center;\n  border: 1px solid #261977;\n`\n\nconst DivWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  img {\n    width: 22px;\n    height: 22px;\n    position: absolute;\n    left: 0;\n  }\n`\nconst BgCom = styled.div`\n  color: #ffffff;\n  text-align: center;\n  line-height: 17px;\n  width: 45px;\n  height: 18px;\n  font-size: 10px;\n  font-family: PingFang SC;\n  font-style: normal;\n  background: url(/images/kernel1.png) left top no-repeat;\n  background-size: 100%;\n  margin-left: 6px;\n`\n\nconst TagComponent = (props) => {\n  const { text } = props\n  return (\n    <DivWrapper>\n      <img src=\"/images/kernel2.png\" alt=\"\" />\n      <BgCom>{text}</BgCom>\n    </DivWrapper>\n  )\n}\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <ATag as=\"a\" href={`/add/${liquidityUrlPathParts}`} target=\"_blank\" style={{ marginRight: 10 }}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </ATag>\n            <ATag as=\"a\" href={bsc} target=\"_blank\">\n              {t('View Contract')}\n            </ATag>\n          </StakeContainer>\n        )}\n        {/* <ATag as=\"a\" href={info} target=\"_blank\" style={{ marginTop: 9, background: \"#261977\", color: '#fff' }} >\n          {t('See Pair Info')}\n        </ATag> */}\n        <TagsContainer>\n          {/* {farm.isCommunity ? <CommunityTag /> : <CoreTag />} */}\n          {/* {farm.isCommunity ? <CommunityTag /> : <TagComponent text={t('Core')} />} */}\n          {farm.isCommunity ? <CommunityTag /> : null}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text color=\"#261977\">{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text color=\"#261977\">{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label style={{ color: '#A6A6B7' }}>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\nimport useBUSDPrice from 'hooks/useBUSDPrice'\nimport { ChainId, Token } from '@awswap/sdk'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  // border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  border-bottom: 10px solid ${({ theme }) => theme.colors.background};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { apr, details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const earningTokenBUSDPrice = useBUSDPrice(\n    new Token(\n      ChainId.MAINNET,\n      details.earningToken.address[ChainId.MAINNET],\n      details.earningToken.decimals,\n      details.earningToken.symbol,\n    ),\n  )\n\n  if (earningTokenBUSDPrice) {\n    const rewardPerBlock = new BigNumber((details as any).rewardPerBlock)\n    const rewardOneDay = rewardPerBlock\n      .times((86400 / 5) * 365)\n      .times(earningTokenBUSDPrice.toFixed(6))\n      .div(DEFAULT_TOKEN_DECIMAL)\n    apr.value = rewardOneDay.div(details.liquidity).times(100).toFixed(0)\n  }\n\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel} className={shouldRenderChild ? 'expanded' : ''}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'multiplier':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('')}>{/* <Apr {...props.apr} hideButton={isSmallerScreen} /> */}</CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel} className={shouldRenderChild ? 'expanded' : ''}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr className=\"defined-tr\">\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  // filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  .expanded {\n    border-bottom: 0;\n  }\n  .defined-tr {\n    border-bottom: 10px solid ${({ theme }) => theme.colors.background};\n  }\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop} style={{ color: '#261977' }}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"#A6A6B7\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/lppools':\n      activeIndex = 0\n      break\n    case '/lppools/history':\n      activeIndex = 1\n      break\n    case '/lppools/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  > div {\n    border: none;\n    background-color: #fff;\n  }\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n  margin-left: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\n\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Text, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@awswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { Farm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\n// import PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport { useBlock } from 'state/block/hooks'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\n// import ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 5px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 4px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 10px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nexport const StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst PageHeader = styled.div`\n  width: 100%;\n  heigth: 200px;\n  background: linear-gradient(259.42deg, #ffc700 4.93%, #f56020 92.22%);\n  padding: 20px 40px;\n  border-radius: 10px;\n`\n\nconst RadioCom = styled.div`\n  display: block;\n  background: #fff;\n  border: 1px solid #f56020;\n  width: 16px;\n  height: 16px;\n  border-radius: 50%;\n  position: relative;\n  box-sizing: border-box;\n  .sel {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    background: #f56020;\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n  }\n`\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  /* eslint-disable-next-line */\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\n  const { account } = useWeb3React()\n  const { currentBlock } = useBlock()\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => parseInt((farm as any).rewardEndBlockNumber) > currentBlock)\n  const inactiveFarms = farmsLP.filter((farm) => parseInt((farm as any).rewardEndBlockNumber) <= currentBlock)\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n          return farm\n        }\n\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const loadMoreRef = useRef<HTMLDivElement>(null)\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    const showMoreFarms = (entries) => {\n      const [entry] = entries\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n          }\n          return farmsCurrentlyVisible\n        })\n      }\n    }\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      loadMoreObserver.observe(loadMoreRef.current)\n      setObserverIsSet(true)\n    }\n  }, [chosenFarmsMemoized, observerIsSet])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Page>\n        <PageHeader>\n          <Heading as=\"h1\" color=\"#fff\" mb=\"20px\" size=\"xl\">\n            {t('Farms')}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"#fff\" textTransform=\"uppercase\">\n            {t('Stake LP tokens and get designated token rewards.')}\n          </Text>\n        </PageHeader>\n\n        <ControlContainer>\n          <ViewControls>\n            <RadioCom onClick={() => setStakedOnly(!stakedOnly)}>\n              {stakedOnly ? <div className=\"sel\" /> : null}\n            </RadioCom>\n            {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\n            <ToggleWrapper>\n              {/* <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" /> */}\n              <Text style={{ fontSize: '12px' }}>{t('Pledge only')}</Text>\n              <Text textTransform=\"uppercase\" style={{ fontSize: '12px', marginRight: '7px' }}>\n                {t('Arrangement')}\n              </Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </ToggleWrapper>\n            {/* <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} /> */}\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              {/* <Text textTransform=\"uppercase\">{t('Search')}</Text> */}\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={loadMoreRef} />\n        <StyledImage src=\"/images/footer-logo.png\" alt=\"Pancake illustration\" width={89} height={67} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}